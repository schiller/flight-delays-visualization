reverse = T,
override.aes = list(alpha = 1, size = 2)))
grid.arrange(p1, p2, p3, ncol = 2)
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Alcohol x Quality Scatterplot")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip()
grid.arrange(p1, p2)
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Alcohol x Quality Scatterplot")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip()
grid.arrange(p1, p2, name = "yolo")
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Alcohol x Quality Scatterplot")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip()
grid.arrange(p1, p2, top = "yolo")
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Scatterplot")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip() +
ggtitle("Boxplot")
grid.arrange(p1, p2, top = "Alcohol x Quality")
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Scatterplot") +
xlab("Alcohol (g/dm^3)")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip() +
ggtitle("Boxplot")
grid.arrange(p1, p2, top = "Alcohol x Quality")
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Scatterplot") +
xlab("Alcohol (% by volume)") +
ylab("Quality")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip() +
ggtitle("Boxplot") +
xlab("Alcohol (% by volume)") +
ylab("Quality")
grid.arrange(p1, p2, top = "Alcohol x Quality")
p1 <- ggplot(wines, aes(alcohol, quality)) +
geom_jitter(alpha = 1/10) +
ggtitle("Scatterplot") +
xlab("Alcohol (% by volume)") +
ylab("Quality")
p2 <- ggplot(wines, aes(ordered(quality), alcohol)) +
geom_boxplot() +
coord_flip() +
ggtitle("Boxplot") +
ylab("Alcohol (% by volume)") +
xlab("Quality")
grid.arrange(p1, p2, top = "Alcohol x Quality")
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 1/2) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol bins (% by volume)',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
ggtitle("Relation between density, residual sugar and alcohol") +
xlab("Residual Sugar (g / dm^3)") +
ylab("Density g / cm^3")
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 1/2) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol bins (% by volume)',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
ggtitle("Relation between density, residual sugar and alcohol") +
xlab("Residual Sugar (g / dm^3)") +
ylab("Density (g / cm^3)")
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 1/2) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol Bins (% by volume)',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
ggtitle("Relation between density, residual sugar and alcohol") +
xlab("Residual Sugar (g / dm^3)") +
ylab("Density (g / cm^3)")
ggplot(wines, aes(residual.sugar, density, color = ordered(quality))) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Quality',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ alcohol.bins) +
ggtitle("Relation between density, residual sugar, alcohol and quality") +
xlab("Residual Sugar (g / dm^3)") +
ylab("Density (g / cm^3)")
ggplot(wines, aes(residual.sugar, density, color = ordered(quality))) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Quality',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ alcohol.bins) +
ggtitle("Relation between density, residual sugar and quality by alcohol buckets") +
xlab("Residual Sugar (g / dm^3)") +
ylab("Density (g / cm^3)")
wines$quality.bins <- cut(wines$quality, c(4, 7))
wines$quality.bins <- cut(wines$quality, c(3, 5, 7, 9))
wines$quality.bins <- cut(wines$quality, c(3, 4, 7, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Quality',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ quality.bins)
wines$quality.bins <- cut(wines$quality, c(3, 4, 7, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Quality',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ quality.bins)
wines$quality.bins <- cut(wines$quality, c(3, 4, 7, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ quality.bins)
wines$quality.bins <- cut(wines$quality, c(3, 4, 7, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ quality.bins)
table(wines$quality.bins)
wines$quality.bins <- cut(wines$quality, c(3, 5, 6, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~ quality.bins)
wines$quality.bins <- cut(wines$quality, c(3, 5, 6, 9))
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~quality.bins)
ggplot(wines, aes(residual.sugar, density, color = alcohol.bins)) +
geom_point(alpha = 2/3) +
coord_cartesian(xlim = c(0, quantile(wines$residual.sugar, .99)),
ylim = c(min(wines$density), quantile(wines$density, .999))) +
scale_color_brewer(type = 'div',
palette = 'RdYlBu',
guide = guide_legend(title = 'Alcohol',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
facet_wrap(~quality)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(GGally)
library(devtools)
# install_github("schloerke/gsoc-ggduo-test")
library(GSoCggduoTest)
library(RColorBrewer)
library(memisc)
library(gridExtra)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(GGally)
library(devtools)
# install_github("schloerke/gsoc-ggduo-test")
library(GSoCggduoTest)
library(RColorBrewer)
library(memisc)
library(gridExtra)
# Load the Data
wines <- read.csv('wineQualityWhites.csv')
wines$X <- NULL
ggplot(data = wine, aes_string(x = feature)) +
geom_histogram(binwidth = bins)
univ_cont <- function(feature, bins) {
ggplot(data = wine, aes_string(x = feature)) +
geom_histogram(binwidth = bins)
}
ggplot(wines, aes(quality)) +
geom_histogram(binwidth = .5) +
scale_x_continuous(breaks = seq(3, 9, 1))
univ_cont("quality", 0.5) +
scale_x_continuous(breaks = seq(3, 9, 1))
univ_cont <- function(feature, bins) {
ggplot(data = wines, aes_string(x = feature)) +
geom_histogram(binwidth = bins)
}
univ_cont("quality", 0.5) +
scale_x_continuous(breaks = seq(3, 9, 1))
ls()
rm(ls())
rm(list(ls))
rm(list(ls()))
rm(list=ls())
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
data("AirPassengers")
class(AirPassengers)
#This tells you that the data series is in a time series format
#This is the start of the time series
start(AirPassengers)
#This is the end of the time series
end(AirPassengers)
frequency(AirPassengers)
#The cycle of this time series is 12months in a year
summary(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
data("AirPassengers")
#This tells you that the data series is in a time series format
class(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
#The number of passengers are distributed across the spectrum
plot(AirPassengers)
#This will plot the time series
abline(reg=lm(AirPassengers~time(AirPassengers)))
# This will fit in a line
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
cycle(AirPassengers)
#This will print the cycle across years.
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
cycle(AirPassengers)
#This will print the cycle across years.
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
cycle(AirPassengers)
#This will print the cycle across years.
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
data("AirPassengers")
#This tells you that the data series is in a time series format
class(AirPassengers)
#This is the start of the time series
start(AirPassengers)
#This is the end of the time series
end(AirPassengers)
#The cycle of this time series is 12months in a year
frequency(AirPassengers)
summary(AirPassengers)
#The number of passengers are distributed across the spectrum
plot(AirPassengers)
#This will plot the time series
abline(reg=lm(AirPassengers~time(AirPassengers)))
# This will fit in a line
cycle(AirPassengers)
#This will print the cycle across years.
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.Test(diff(log(AirPassengers)), alternative="stationary", k=0)
library(tseries)
install.packages("tseries")
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
plot(AirPassengers)
plot(log(AirPassengers))
plot(AirPassengers)
plot(log(AirPassengers))
plot(diff(AirPassengers))
diff(1:10, 2)
diff(1:10, 2, 2)
x <- cumsum(cumsum(1:10))
diff(x, lag = 2)
diff(x, differences = 2)
diff(.leap.seconds)
diff(1:10)
1:10
diff(1:10)
1:10
diff(1:10)
1:10
diff(1:10)
diff(1:10, 1, 2)
diff(1:10, 2)
diff(1:10, 2, 2)
x <- cumsum(cumsum(1:10))
x
diff(x, lag = 2)
diff(x, differences = 2)
diff(.leap.seconds)
diff(1:10, 2)
diff(1:10, 2, 2)
x <- cumsum(cumsum(1:10))
x
diff(x, lag = 2)
diff(x)
diff(x, differences = 2)
diff(.leap.seconds)
plot(diff(log(AirPassengers)))
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
ts.plot(AirPassengers,2.718^pred$pred, lty = c(1,3))
ts.plot(AirPassengers, 2.718^pred$pred)
ts.plot(AirPassengers, 2.718^pred$pred, lty = c(1,3))
ls()
rm(list = ls())
rm(list = ls())
rm(list = ls())
getwd()
setwd(dir = "../DataScience/udacity-nanodegree-data-analyst/P6 - Make Effective Data Visualization/final-project/data/")
delays <- read.csv(file = "2003_06_2017_01_airline_delay_causes.csv")
View(delays)
colnames(x = delays)
colnames(x = delays)["X.month"]
colnames(delays)[c(2, 10, 16, 17)] <-
c("month", "weather_ct", "arr_delay", "carrier_delay")
delay["year"]
delays["year"]
delays <- delays[c("year", "month", "arr_flights", "arr_del15", "arr_cancelled",
"arr_diverted", "carrier_delay", "weather_delay",
"nas_delay", "security_delay", "late_aircraft_delay"]
delays <- delays[c("year", "month", "arr_flights", "arr_del15", "arr_cancelled",
"arr_diverted", "carrier_delay", "weather_delay",
"nas_delay", "security_delay", "late_aircraft_delay")]
library(dplyr)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(dplyr)
delays %>%
group_by(c(year, month)) %>%
summarise_all(sum)
delays %>%
group_by(c(year, month)) %>%
summarise_all(sum)
delays %>%
group_by(c(year, month)) %>%
summarise_all(mean)
delays %>%
group_by(c(year, month)) %>%
summarise_all(sum)
delays %>%
group_by(c(year)) %>%
summarise_all(sum)
delays %>%
group_by(c(year)) %>%
summarise_all(sum)
new_delays <- delays %>%
group_by(c(year, month)) %>%
summarise_all(sum)
new_delays <- delays %>%
group_by(c(year, month)) %>%
summarise(sum)
new_delays <- delays %>%
group_by(year) %>%
summarise_all(sum)
delays <- read.csv(file = "2003_06_2017_01_airline_delay_causes.csv")
colnames(delays)[c(2, 10, 16, 17)] <-
c("month", "weather_ct", "arr_delay", "carrier_delay")
delays <- delays[c("year", "month", "arr_flights", "arr_del15", "arr_cancelled",
"arr_diverted", "carrier_delay", "weather_delay",
"nas_delay", "security_delay", "late_aircraft_delay")]
delays[is.na(delays)] <- 0
new_delays <- delays %>%
group_by(c(year, month)) %>%
summarise_all(sum)
new_delays <- delays %>%
group_by(c(year, month)) %>%
summarise_all(sum) %>%
summarise_all(sum)
new_delays <- delays %>%
group_by(year, month) %>%
summarise_all(sum)
View(new_delays)
new_delays <- delays %>%
group_by(year, month) %>%
summarise_all(sum) %>%
ungroup()
grouped_delays <- delays %>%
group_by(year, month) %>%
summarise_all(sum) %>%
ungroup()
rm(new_delays)
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggplot2)
delays <- delays %>%
unite(col = "month", month, year, sep = "/")
delays <- read.csv(file = "2003_06_2017_01_airline_delay_causes.csv")
colnames(delays)[c(2, 10, 16, 17)] <-
c("month", "weather_ct", "arr_delay", "carrier_delay")
delays <- delays[c("year", "month", "arr_flights", "arr_del15", "arr_cancelled",
"arr_diverted", "carrier_delay", "weather_delay",
"nas_delay", "security_delay", "late_aircraft_delay")]
delays[is.na(delays)] <- 0
grouped_delays <- delays %>%
unite(col = "month", month, year, sep = "-") %>%
group_by(year, month) %>%
summarise_all(sum) %>%
ungroup()
grouped_delays <- delays %>%
unite(col = "month", month, year, sep = "-") %>%
group_by(month) %>%
summarise_all(sum) %>%
ungroup()
ggplot(data = grouped_delays, aes(x = month))
ggplot(data = grouped_delays, aes(x = month)) +
geom_line(aes(arr_flights))
ggplot(data = grouped_delays, aes(x = month)) +
geom_line(aes(y = arr_flights))
ggplot(data = grouped_delays, aes(x = month, y = arr_flights))
ggplot(data = grouped_delays, aes(x = month, y = arr_flights)) +
geom_line()
ggplot(grouped_delays, aes(month, arr_flights))
ggplot(grouped_delays, aes(month, arr_flights)) +
geom_path()
ggplot(grouped_delays, aes(month, arr_flights)) +
geom_point()
ggplot(grouped_delays, aes(month, arr_flights)) +
geom_path()
ggplot(grouped_delays, aes(month, arr_flights, group = 1)) +
geom_path()
ggplot(grouped_delays, aes(month, arr_flights, group = 1)) +
geom_path() +
geom_line()
ggplot(grouped_delays, aes(month, arr_flights, group = 1)) +
geom_line()
ggplot(grouped_delays, aes(month)) +
geom_line(aes(y = carrier_delay)) +
geom_line(aes(y = weather_delay))
ggplot(grouped_delays, aes(month, group = 1)) +
geom_line(aes(y = carrier_delay)) +
geom_line(aes(y = weather_delay))
